// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.0
// source: proto/tickets.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TicketsService_CreateOrder_FullMethodName         = "/tickets.TicketsService/CreateOrder"
	TicketsService_GetOrder_FullMethodName            = "/tickets.TicketsService/GetOrder"
	TicketsService_ListOrders_FullMethodName          = "/tickets.TicketsService/ListOrders"
	TicketsService_GetConcertSession_FullMethodName   = "/tickets.TicketsService/GetConcertSession"
	TicketsService_ListConcertSessions_FullMethodName = "/tickets.TicketsService/ListConcertSessions"
	TicketsService_GetAvailableTickets_FullMethodName = "/tickets.TicketsService/GetAvailableTickets"
)

// TicketsServiceClient is the client API for TicketsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// TicketsService provides ticket and order management functionality
type TicketsServiceClient interface {
	// CreateOrder creates a new ticket order
	CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateOrderResponse, error)
	// GetOrder retrieves an order by ID
	GetOrder(ctx context.Context, in *GetOrderRequest, opts ...grpc.CallOption) (*GetOrderResponse, error)
	// ListOrders retrieves orders for a user
	ListOrders(ctx context.Context, in *ListOrdersRequest, opts ...grpc.CallOption) (*ListOrdersResponse, error)
	// GetConcertSession retrieves a concert session by ID
	GetConcertSession(ctx context.Context, in *GetConcertSessionRequest, opts ...grpc.CallOption) (*GetConcertSessionResponse, error)
	// ListConcertSessions retrieves all concert sessions
	ListConcertSessions(ctx context.Context, in *ListConcertSessionsRequest, opts ...grpc.CallOption) (*ListConcertSessionsResponse, error)
	// GetAvailableTickets retrieves available tickets for a session
	GetAvailableTickets(ctx context.Context, in *GetAvailableTicketsRequest, opts ...grpc.CallOption) (*GetAvailableTicketsResponse, error)
}

type ticketsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTicketsServiceClient(cc grpc.ClientConnInterface) TicketsServiceClient {
	return &ticketsServiceClient{cc}
}

func (c *ticketsServiceClient) CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateOrderResponse)
	err := c.cc.Invoke(ctx, TicketsService_CreateOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketsServiceClient) GetOrder(ctx context.Context, in *GetOrderRequest, opts ...grpc.CallOption) (*GetOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrderResponse)
	err := c.cc.Invoke(ctx, TicketsService_GetOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketsServiceClient) ListOrders(ctx context.Context, in *ListOrdersRequest, opts ...grpc.CallOption) (*ListOrdersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListOrdersResponse)
	err := c.cc.Invoke(ctx, TicketsService_ListOrders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketsServiceClient) GetConcertSession(ctx context.Context, in *GetConcertSessionRequest, opts ...grpc.CallOption) (*GetConcertSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetConcertSessionResponse)
	err := c.cc.Invoke(ctx, TicketsService_GetConcertSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketsServiceClient) ListConcertSessions(ctx context.Context, in *ListConcertSessionsRequest, opts ...grpc.CallOption) (*ListConcertSessionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListConcertSessionsResponse)
	err := c.cc.Invoke(ctx, TicketsService_ListConcertSessions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketsServiceClient) GetAvailableTickets(ctx context.Context, in *GetAvailableTicketsRequest, opts ...grpc.CallOption) (*GetAvailableTicketsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAvailableTicketsResponse)
	err := c.cc.Invoke(ctx, TicketsService_GetAvailableTickets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TicketsServiceServer is the server API for TicketsService service.
// All implementations must embed UnimplementedTicketsServiceServer
// for forward compatibility.
//
// TicketsService provides ticket and order management functionality
type TicketsServiceServer interface {
	// CreateOrder creates a new ticket order
	CreateOrder(context.Context, *CreateOrderRequest) (*CreateOrderResponse, error)
	// GetOrder retrieves an order by ID
	GetOrder(context.Context, *GetOrderRequest) (*GetOrderResponse, error)
	// ListOrders retrieves orders for a user
	ListOrders(context.Context, *ListOrdersRequest) (*ListOrdersResponse, error)
	// GetConcertSession retrieves a concert session by ID
	GetConcertSession(context.Context, *GetConcertSessionRequest) (*GetConcertSessionResponse, error)
	// ListConcertSessions retrieves all concert sessions
	ListConcertSessions(context.Context, *ListConcertSessionsRequest) (*ListConcertSessionsResponse, error)
	// GetAvailableTickets retrieves available tickets for a session
	GetAvailableTickets(context.Context, *GetAvailableTicketsRequest) (*GetAvailableTicketsResponse, error)
	mustEmbedUnimplementedTicketsServiceServer()
}

// UnimplementedTicketsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTicketsServiceServer struct{}

func (UnimplementedTicketsServiceServer) CreateOrder(context.Context, *CreateOrderRequest) (*CreateOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrder not implemented")
}
func (UnimplementedTicketsServiceServer) GetOrder(context.Context, *GetOrderRequest) (*GetOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrder not implemented")
}
func (UnimplementedTicketsServiceServer) ListOrders(context.Context, *ListOrdersRequest) (*ListOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrders not implemented")
}
func (UnimplementedTicketsServiceServer) GetConcertSession(context.Context, *GetConcertSessionRequest) (*GetConcertSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConcertSession not implemented")
}
func (UnimplementedTicketsServiceServer) ListConcertSessions(context.Context, *ListConcertSessionsRequest) (*ListConcertSessionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConcertSessions not implemented")
}
func (UnimplementedTicketsServiceServer) GetAvailableTickets(context.Context, *GetAvailableTicketsRequest) (*GetAvailableTicketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailableTickets not implemented")
}
func (UnimplementedTicketsServiceServer) mustEmbedUnimplementedTicketsServiceServer() {}
func (UnimplementedTicketsServiceServer) testEmbeddedByValue()                        {}

// UnsafeTicketsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TicketsServiceServer will
// result in compilation errors.
type UnsafeTicketsServiceServer interface {
	mustEmbedUnimplementedTicketsServiceServer()
}

func RegisterTicketsServiceServer(s grpc.ServiceRegistrar, srv TicketsServiceServer) {
	// If the following call pancis, it indicates UnimplementedTicketsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TicketsService_ServiceDesc, srv)
}

func _TicketsService_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketsServiceServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicketsService_CreateOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketsServiceServer).CreateOrder(ctx, req.(*CreateOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketsService_GetOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketsServiceServer).GetOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicketsService_GetOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketsServiceServer).GetOrder(ctx, req.(*GetOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketsService_ListOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketsServiceServer).ListOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicketsService_ListOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketsServiceServer).ListOrders(ctx, req.(*ListOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketsService_GetConcertSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConcertSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketsServiceServer).GetConcertSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicketsService_GetConcertSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketsServiceServer).GetConcertSession(ctx, req.(*GetConcertSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketsService_ListConcertSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConcertSessionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketsServiceServer).ListConcertSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicketsService_ListConcertSessions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketsServiceServer).ListConcertSessions(ctx, req.(*ListConcertSessionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketsService_GetAvailableTickets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAvailableTicketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketsServiceServer).GetAvailableTickets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicketsService_GetAvailableTickets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketsServiceServer).GetAvailableTickets(ctx, req.(*GetAvailableTicketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TicketsService_ServiceDesc is the grpc.ServiceDesc for TicketsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TicketsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tickets.TicketsService",
	HandlerType: (*TicketsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrder",
			Handler:    _TicketsService_CreateOrder_Handler,
		},
		{
			MethodName: "GetOrder",
			Handler:    _TicketsService_GetOrder_Handler,
		},
		{
			MethodName: "ListOrders",
			Handler:    _TicketsService_ListOrders_Handler,
		},
		{
			MethodName: "GetConcertSession",
			Handler:    _TicketsService_GetConcertSession_Handler,
		},
		{
			MethodName: "ListConcertSessions",
			Handler:    _TicketsService_ListConcertSessions_Handler,
		},
		{
			MethodName: "GetAvailableTickets",
			Handler:    _TicketsService_GetAvailableTickets_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/tickets.proto",
}
